
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ARROW END EPSILON GRAM NEWLINE OU REGEX REGEX2 REGEX3 SIMBNAOTERMINAIS SIMBTERMINAISgramatica : regexs GRAM listaProducoesregexs : regexs regexregex : REGEX REGEX2 REGEX3regexs : regexgramatica :listaProducoes : listaProducoes NEWLINE producao listaProducoes : producao newlineslistaProducoes : listaProducoes newlinesproducao : ladoEsq ARROW ladoDirladoEsq : SIMBNAOTERMINAISnewlines : producoesSimples OU producaoSimplesproducoesSimples : producaoSimples : '|' ladoDirOU ENDladoDirOU : SIMBTERMINAISladoDirOU : EPSILONladoDirOU : recursividadeOu SIMBTERMINAISrecursividadeOu : SIMBNAOTERMINAISladoDir : SIMBTERMINAISladoDir : EPSILON ladoDir : recursividade SIMBTERMINAISrecursividade : SIMBNAOTERMINAIS"
    
_lr_action_items = {'$end':([0,1,8,14,16,18,20,21,22,25,27,33,],[-5,0,-1,-8,-7,-6,-9,-18,-19,-11,-20,-13,]),'REGEX':([0,2,3,6,12,],[4,4,-4,-2,-3,]),'GRAM':([2,3,6,12,],[5,-4,-2,-3,]),'REGEX2':([4,],[7,]),'SIMBNAOTERMINAIS':([5,13,17,26,],[11,11,24,32,]),'REGEX3':([7,],[12,]),'NEWLINE':([8,14,16,18,20,21,22,25,27,33,],[13,-8,-7,-6,-9,-18,-19,-11,-20,-13,]),'OU':([8,9,14,15,16,18,20,21,22,25,27,33,],[-12,-12,-8,19,-7,-6,-9,-18,-19,-11,-20,-13,]),'ARROW':([10,11,],[17,-10,]),'SIMBTERMINAIS':([17,23,24,26,31,32,],[21,27,-21,29,34,-17,]),'EPSILON':([17,26,],[22,30,]),'|':([19,],[26,]),'END':([28,29,30,34,],[33,-14,-15,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'gramatica':([0,],[1,]),'regexs':([0,],[2,]),'regex':([0,2,],[3,6,]),'listaProducoes':([5,],[8,]),'producao':([5,13,],[9,18,]),'ladoEsq':([5,13,],[10,10,]),'newlines':([8,9,],[14,16,]),'producoesSimples':([8,9,],[15,15,]),'ladoDir':([17,],[20,]),'recursividade':([17,],[23,]),'producaoSimples':([19,],[25,]),'ladoDirOU':([26,],[28,]),'recursividadeOu':([26,],[31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> gramatica","S'",1,None,None,None),
  ('gramatica -> regexs GRAM listaProducoes','gramatica',3,'p_gramatica','lex.py',83),
  ('regexs -> regexs regex','regexs',2,'p_regexs','lex.py',87),
  ('regex -> REGEX REGEX2 REGEX3','regex',3,'p_regex','lex.py',91),
  ('regexs -> regex','regexs',1,'p_regexSim','lex.py',95),
  ('gramatica -> <empty>','gramatica',0,'p_gramatica_empty','lex.py',99),
  ('listaProducoes -> listaProducoes NEWLINE producao','listaProducoes',3,'p_listaProducoes_recursivo','lex.py',103),
  ('listaProducoes -> producao newlines','listaProducoes',2,'p_listaProducoes_elemento','lex.py',109),
  ('listaProducoes -> listaProducoes newlines','listaProducoes',2,'p_listaProducoes_newline','lex.py',115),
  ('producao -> ladoEsq ARROW ladoDir','producao',3,'p_producao','lex.py',121),
  ('ladoEsq -> SIMBNAOTERMINAIS','ladoEsq',1,'p_ladoEsq','lex.py',125),
  ('newlines -> producoesSimples OU producaoSimples','newlines',3,'p_newlines','lex.py',135),
  ('producoesSimples -> <empty>','producoesSimples',0,'p_newlinesSimp','lex.py',141),
  ('producaoSimples -> | ladoDirOU END','producaoSimples',3,'p_producaoSimples','lex.py',145),
  ('ladoDirOU -> SIMBTERMINAIS','ladoDirOU',1,'p_ladoDirOU','lex.py',149),
  ('ladoDirOU -> EPSILON','ladoDirOU',1,'p_ladoDirOU_epsilon','lex.py',156),
  ('ladoDirOU -> recursividadeOu SIMBTERMINAIS','ladoDirOU',2,'p_ladoDirOU_rec','lex.py',163),
  ('recursividadeOu -> SIMBNAOTERMINAIS','recursividadeOu',1,'p_recursividadeOU','lex.py',170),
  ('ladoDir -> SIMBTERMINAIS','ladoDir',1,'p_ladoDir_simbter','lex.py',177),
  ('ladoDir -> EPSILON','ladoDir',1,'p_ladoDir_epsilon','lex.py',184),
  ('ladoDir -> recursividade SIMBTERMINAIS','ladoDir',2,'p_ladoDir_rec','lex.py',190),
  ('recursividade -> SIMBNAOTERMINAIS','recursividade',1,'p_recursividade','lex.py',197),
]
