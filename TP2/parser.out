Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> gramatica
Rule 1     gramatica -> regexs GRAM listaProducoes
Rule 2     regexs -> regexs regex
Rule 3     regex -> REGEX REGEX2 REGEX3
Rule 4     regexs -> regex
Rule 5     gramatica -> <empty>
Rule 6     listaProducoes -> listaProducoes NEWLINE producao
Rule 7     listaProducoes -> producao newlines
Rule 8     listaProducoes -> listaProducoes newlines
Rule 9     producao -> ladoEsq ARROW ladoDir
Rule 10    ladoEsq -> SIMBNAOTERMINAIS
Rule 11    newlines -> producoesSimples OU producaoSimples
Rule 12    producoesSimples -> <empty>
Rule 13    producaoSimples -> | ladoDirOU END
Rule 14    ladoDirOU -> SIMBTERMINAIS
Rule 15    ladoDirOU -> EPSILON
Rule 16    ladoDirOU -> recursividadeOu SIMBTERMINAIS
Rule 17    recursividadeOu -> SIMBNAOTERMINAIS
Rule 18    ladoDir -> SIMBTERMINAIS
Rule 19    ladoDir -> EPSILON
Rule 20    ladoDir -> recursividade SIMBTERMINAIS
Rule 21    recursividade -> SIMBNAOTERMINAIS

Terminals, with rules where they appear

ARROW                : 9
END                  : 13
EPSILON              : 15 19
GRAM                 : 1
NEWLINE              : 6
OU                   : 11
REGEX                : 3
REGEX2               : 3
REGEX3               : 3
SIMBNAOTERMINAIS     : 10 17 21
SIMBTERMINAIS        : 14 16 18 20
error                : 
|                    : 13

Nonterminals, with rules where they appear

gramatica            : 0
ladoDir              : 9
ladoDirOU            : 13
ladoEsq              : 9
listaProducoes       : 1 6 8
newlines             : 7 8
producao             : 6 7
producaoSimples      : 11
producoesSimples     : 11
recursividade        : 20
recursividadeOu      : 16
regex                : 2 4
regexs               : 1 2

Parsing method: LALR

state 0

    (0) S' -> . gramatica
    (1) gramatica -> . regexs GRAM listaProducoes
    (5) gramatica -> .
    (2) regexs -> . regexs regex
    (4) regexs -> . regex
    (3) regex -> . REGEX REGEX2 REGEX3

    $end            reduce using rule 5 (gramatica -> .)
    REGEX           shift and go to state 4

    gramatica                      shift and go to state 1
    regexs                         shift and go to state 2
    regex                          shift and go to state 3

state 1

    (0) S' -> gramatica .



state 2

    (1) gramatica -> regexs . GRAM listaProducoes
    (2) regexs -> regexs . regex
    (3) regex -> . REGEX REGEX2 REGEX3

    GRAM            shift and go to state 5
    REGEX           shift and go to state 4

    regex                          shift and go to state 6

state 3

    (4) regexs -> regex .

    GRAM            reduce using rule 4 (regexs -> regex .)
    REGEX           reduce using rule 4 (regexs -> regex .)


state 4

    (3) regex -> REGEX . REGEX2 REGEX3

    REGEX2          shift and go to state 7


state 5

    (1) gramatica -> regexs GRAM . listaProducoes
    (6) listaProducoes -> . listaProducoes NEWLINE producao
    (7) listaProducoes -> . producao newlines
    (8) listaProducoes -> . listaProducoes newlines
    (9) producao -> . ladoEsq ARROW ladoDir
    (10) ladoEsq -> . SIMBNAOTERMINAIS

    SIMBNAOTERMINAIS shift and go to state 11

    listaProducoes                 shift and go to state 8
    producao                       shift and go to state 9
    ladoEsq                        shift and go to state 10

state 6

    (2) regexs -> regexs regex .

    GRAM            reduce using rule 2 (regexs -> regexs regex .)
    REGEX           reduce using rule 2 (regexs -> regexs regex .)


state 7

    (3) regex -> REGEX REGEX2 . REGEX3

    REGEX3          shift and go to state 12


state 8

    (1) gramatica -> regexs GRAM listaProducoes .
    (6) listaProducoes -> listaProducoes . NEWLINE producao
    (8) listaProducoes -> listaProducoes . newlines
    (11) newlines -> . producoesSimples OU producaoSimples
    (12) producoesSimples -> .

    $end            reduce using rule 1 (gramatica -> regexs GRAM listaProducoes .)
    NEWLINE         shift and go to state 13
    OU              reduce using rule 12 (producoesSimples -> .)

    newlines                       shift and go to state 14
    producoesSimples               shift and go to state 15

state 9

    (7) listaProducoes -> producao . newlines
    (11) newlines -> . producoesSimples OU producaoSimples
    (12) producoesSimples -> .

    OU              reduce using rule 12 (producoesSimples -> .)

    newlines                       shift and go to state 16
    producoesSimples               shift and go to state 15

state 10

    (9) producao -> ladoEsq . ARROW ladoDir

    ARROW           shift and go to state 17


state 11

    (10) ladoEsq -> SIMBNAOTERMINAIS .

    ARROW           reduce using rule 10 (ladoEsq -> SIMBNAOTERMINAIS .)


state 12

    (3) regex -> REGEX REGEX2 REGEX3 .

    GRAM            reduce using rule 3 (regex -> REGEX REGEX2 REGEX3 .)
    REGEX           reduce using rule 3 (regex -> REGEX REGEX2 REGEX3 .)


state 13

    (6) listaProducoes -> listaProducoes NEWLINE . producao
    (9) producao -> . ladoEsq ARROW ladoDir
    (10) ladoEsq -> . SIMBNAOTERMINAIS

    SIMBNAOTERMINAIS shift and go to state 11

    producao                       shift and go to state 18
    ladoEsq                        shift and go to state 10

state 14

    (8) listaProducoes -> listaProducoes newlines .

    NEWLINE         reduce using rule 8 (listaProducoes -> listaProducoes newlines .)
    OU              reduce using rule 8 (listaProducoes -> listaProducoes newlines .)
    $end            reduce using rule 8 (listaProducoes -> listaProducoes newlines .)


state 15

    (11) newlines -> producoesSimples . OU producaoSimples

    OU              shift and go to state 19


state 16

    (7) listaProducoes -> producao newlines .

    NEWLINE         reduce using rule 7 (listaProducoes -> producao newlines .)
    OU              reduce using rule 7 (listaProducoes -> producao newlines .)
    $end            reduce using rule 7 (listaProducoes -> producao newlines .)


state 17

    (9) producao -> ladoEsq ARROW . ladoDir
    (18) ladoDir -> . SIMBTERMINAIS
    (19) ladoDir -> . EPSILON
    (20) ladoDir -> . recursividade SIMBTERMINAIS
    (21) recursividade -> . SIMBNAOTERMINAIS

    SIMBTERMINAIS   shift and go to state 21
    EPSILON         shift and go to state 22
    SIMBNAOTERMINAIS shift and go to state 24

    ladoDir                        shift and go to state 20
    recursividade                  shift and go to state 23

state 18

    (6) listaProducoes -> listaProducoes NEWLINE producao .

    NEWLINE         reduce using rule 6 (listaProducoes -> listaProducoes NEWLINE producao .)
    OU              reduce using rule 6 (listaProducoes -> listaProducoes NEWLINE producao .)
    $end            reduce using rule 6 (listaProducoes -> listaProducoes NEWLINE producao .)


state 19

    (11) newlines -> producoesSimples OU . producaoSimples
    (13) producaoSimples -> . | ladoDirOU END

    |               shift and go to state 26

    producaoSimples                shift and go to state 25

state 20

    (9) producao -> ladoEsq ARROW ladoDir .

    OU              reduce using rule 9 (producao -> ladoEsq ARROW ladoDir .)
    NEWLINE         reduce using rule 9 (producao -> ladoEsq ARROW ladoDir .)
    $end            reduce using rule 9 (producao -> ladoEsq ARROW ladoDir .)


state 21

    (18) ladoDir -> SIMBTERMINAIS .

    OU              reduce using rule 18 (ladoDir -> SIMBTERMINAIS .)
    NEWLINE         reduce using rule 18 (ladoDir -> SIMBTERMINAIS .)
    $end            reduce using rule 18 (ladoDir -> SIMBTERMINAIS .)


state 22

    (19) ladoDir -> EPSILON .

    OU              reduce using rule 19 (ladoDir -> EPSILON .)
    NEWLINE         reduce using rule 19 (ladoDir -> EPSILON .)
    $end            reduce using rule 19 (ladoDir -> EPSILON .)


state 23

    (20) ladoDir -> recursividade . SIMBTERMINAIS

    SIMBTERMINAIS   shift and go to state 27


state 24

    (21) recursividade -> SIMBNAOTERMINAIS .

    SIMBTERMINAIS   reduce using rule 21 (recursividade -> SIMBNAOTERMINAIS .)


state 25

    (11) newlines -> producoesSimples OU producaoSimples .

    NEWLINE         reduce using rule 11 (newlines -> producoesSimples OU producaoSimples .)
    OU              reduce using rule 11 (newlines -> producoesSimples OU producaoSimples .)
    $end            reduce using rule 11 (newlines -> producoesSimples OU producaoSimples .)


state 26

    (13) producaoSimples -> | . ladoDirOU END
    (14) ladoDirOU -> . SIMBTERMINAIS
    (15) ladoDirOU -> . EPSILON
    (16) ladoDirOU -> . recursividadeOu SIMBTERMINAIS
    (17) recursividadeOu -> . SIMBNAOTERMINAIS

    SIMBTERMINAIS   shift and go to state 29
    EPSILON         shift and go to state 30
    SIMBNAOTERMINAIS shift and go to state 32

    ladoDirOU                      shift and go to state 28
    recursividadeOu                shift and go to state 31

state 27

    (20) ladoDir -> recursividade SIMBTERMINAIS .

    OU              reduce using rule 20 (ladoDir -> recursividade SIMBTERMINAIS .)
    NEWLINE         reduce using rule 20 (ladoDir -> recursividade SIMBTERMINAIS .)
    $end            reduce using rule 20 (ladoDir -> recursividade SIMBTERMINAIS .)


state 28

    (13) producaoSimples -> | ladoDirOU . END

    END             shift and go to state 33


state 29

    (14) ladoDirOU -> SIMBTERMINAIS .

    END             reduce using rule 14 (ladoDirOU -> SIMBTERMINAIS .)


state 30

    (15) ladoDirOU -> EPSILON .

    END             reduce using rule 15 (ladoDirOU -> EPSILON .)


state 31

    (16) ladoDirOU -> recursividadeOu . SIMBTERMINAIS

    SIMBTERMINAIS   shift and go to state 34


state 32

    (17) recursividadeOu -> SIMBNAOTERMINAIS .

    SIMBTERMINAIS   reduce using rule 17 (recursividadeOu -> SIMBNAOTERMINAIS .)


state 33

    (13) producaoSimples -> | ladoDirOU END .

    NEWLINE         reduce using rule 13 (producaoSimples -> | ladoDirOU END .)
    OU              reduce using rule 13 (producaoSimples -> | ladoDirOU END .)
    $end            reduce using rule 13 (producaoSimples -> | ladoDirOU END .)


state 34

    (16) ladoDirOU -> recursividadeOu SIMBTERMINAIS .

    END             reduce using rule 16 (ladoDirOU -> recursividadeOu SIMBTERMINAIS .)

